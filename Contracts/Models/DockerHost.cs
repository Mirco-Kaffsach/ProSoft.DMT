using System.Diagnostics.CodeAnalysis;

namespace ProSoft.DMT.Contracts.Models;

public sealed class DockerHost : IDisposable
{
    public Guid SystemId { get; set; }

    public int Id { get; set; }

    public string Title { get; set; } = string.Empty;

    public string FqdnIp { get; set; } = string.Empty;

    public bool IsActive { get; set; }

    public DateTime Created { get; set; }

    #region IDisposable Interface Implementation

    private bool _disposed;

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    private void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            // Disposing Logic
        }

        _disposed = true;
    }

    /// <summary>
    /// Finalizes an instance of the <see cref="DockerHost"/> class.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    ~DockerHost()
    {
        this.Dispose(false);
    }

    #endregion
}
