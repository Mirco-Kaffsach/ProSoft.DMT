using System.Diagnostics.CodeAnalysis;
using Docker.DotNet;
using Docker.DotNet.Models;
using Microsoft.Extensions.Logging;
using ProSoft.DMT.Api.Logic.Contracts.Manager;

namespace ProSoft.DMT.Api.Logic.Manager;

public sealed class ContainerManager : IContainerManager
{
    private readonly ILogger<ContainerManager> _logger;

    public ContainerManager(ILogger<ContainerManager> logger)
    {
        _logger = logger;
    }

    public async Task<List<ContainerListResponse>> GetContainersAsync(CancellationToken cancellationToken)
    {
        _logger.LogDebug("Get all containers");
        var client = new DockerClientConfiguration().CreateClient();
        var containerList = await client.Containers.ListContainersAsync(new ContainersListParameters(), cancellationToken);

        return containerList == null
            ? []
            : containerList.ToList();
    }

    #region IDisposable Interface Implementation

    private bool _disposed;

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    private void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            // Disposing Logic
        }

        _disposed = true;
    }

    /// <summary>
    /// Finalizes an instance of the <see cref="ContainerManager"/> class.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    ~ContainerManager()
    {
        this.Dispose(false);
    }

    #endregion
}
