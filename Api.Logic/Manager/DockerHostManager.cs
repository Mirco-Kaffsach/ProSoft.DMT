using System.Diagnostics.CodeAnalysis;
using Microsoft.Extensions.Logging;
using ProSoft.DMT.Api.Data.Contracts.Repositories;
using ProSoft.DMT.Api.Logic.Contracts.Manager;
using ProSoft.DMT.Contracts.Models;

namespace ProSoft.DMT.Api.Logic.Manager;

public sealed class DockerHostManager : IDockerHostManager
{
    private readonly ILogger<DockerHostManager> _logger;
    private readonly IDockerHostRepository _dockerHostRepository;

    public DockerHostManager(ILogger<DockerHostManager> logger, IDockerHostRepository dockerHostRepository)
    {
        _logger = logger;
        _dockerHostRepository = dockerHostRepository;
    }

    public IQueryable<DockerHost> GetAllDockerHosts()
    {
        _logger.LogDebug("Get all docker hosts");
        return _dockerHostRepository.GetDockerHostQuery();
    }

    #region IDisposable Interface Implementation

    private bool _disposed;

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    private void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            // Disposing Logic
        }

        _disposed = true;
    }

    /// <summary>
    /// Finalizes an instance of the <see cref="DockerHostManager"/> class.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    ~DockerHostManager()
    {
        this.Dispose(false);
    }

    #endregion
}
