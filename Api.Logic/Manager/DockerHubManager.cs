using System.Diagnostics.CodeAnalysis;
using System.Net.Http.Json;
using Microsoft.Extensions.Logging;
using ProSoft.DMT.Api.Logic.Contracts.Manager;
using ProSoft.DMT.Contracts;
using ProSoft.DMT.Contracts.Models.DockerHub;

namespace ProSoft.DMT.Api.Logic.Manager;

public sealed class DockerHubManager : IDockerHubManager
{
    private readonly ILogger<DockerHubManager> _logger;
    private readonly IHttpClientFactory _httpClientFactory;

    public DockerHubManager(ILogger<DockerHubManager> logger, IHttpClientFactory httpClientFactory)
    {
        _logger = logger;
        _httpClientFactory = httpClientFactory;
    }

    public async Task GetDataAsync(CancellationToken cancellationToken)
    {
        _logger.LogDebug("Get all image tags");
        var imageName = "datalust/seq";

        using (var httpClient = _httpClientFactory.CreateClient(HttpClientNames.DockerHub))
        {
            var jsonResponse = await httpClient.GetFromJsonAsync<Rootobject>($"{imageName}/tags", cancellationToken);
        }
    }

    #region IDisposable Interface Implementation

    private bool _disposed;

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    public void Dispose()
    {
        this.Dispose(true);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Releases unmanaged and - optionally - managed resources.
    /// </summary>
    /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    private void Dispose(bool disposing)
    {
        if (!_disposed && disposing)
        {
            // Disposing Logic
        }

        _disposed = true;
    }

    /// <summary>
    /// Finalizes an instance of the <see cref="DockerHubManager"/> class.
    /// </summary>
    /// <autogeneratedoc />
    [ExcludeFromCodeCoverage]
    ~DockerHubManager()
    {
        this.Dispose(false);
    }

    #endregion
}
